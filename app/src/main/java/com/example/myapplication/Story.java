package com.example.myapplication;

import java.util.ArrayList;
import java.util.List;

public class Story {
    private Situation start_story;
    public Situation current_situation;
    private List<Situation> stories; // список историй

    //Основная история
    Story() {
        stories = new ArrayList<>();
        stories.add(createStoryOne()); // добавление первой истории
        stories.add(createStoryTwo()); // добавление второй истории
        // добавьте другие истории при необходимости
        current_situation = stories.get(0); // начальная история
    }

    private Situation createStoryTwo() {
        start_story = new Situation(
                "Новая история",
                "",
                0, 0, 0, 0);
        return start_story;
    }

    private Situation createStoryOne() {
        start_story = new Situation(
                "Загадочное письмо",
                "Вы находитесь в загадочной и старой библиотеке, куда вас привел таинственный письмо без отправителя. " +
                        " Вокруг вас полно книг и книжных полок." +
                        "Перед вами есть два коридора, каждый из которых ведет в различные сказочные миры. Что вы будете делать?\n(1)Выйти из библиотеки и проигнорировать письмо." +
                        "(2)Открыть письмо и посмотреть, о чем оно." +
                        "(3)Исследовать первый коридор." +
                        "\n(4)Исследовать второй коридор." ,
                4, 0, 0, 0);
        start_story.direction[0] = new Situation(
                "Вы вышли из библеотеки ",
                "Вы вышли из библиотеки и проигнорировать письмо,  вы упустили возможность исследовать загадочные сказочные миры, которые могут быть за каждым из двух коридоров.  "
                        + " Лучше всего открыть письмо и посмотреть, о чем оно. Так вы сможете получить больше информации и решить, какой коридор исследовать.",
                1, 0, 0, 0);
        start_story.direction[1] = new Situation(
                "Вы открыли письмо,    " +
                        "",
                "и вы получите информацию о том,почему вас пригласили в эту библиотеку и что вы должны делать дальше Письмо содержит инструкции о том, как выбрать один из двух коридоров" +
                        " и начать исследование сказочных миров." +
                        "\n(1) Узнать инструкцию " +
                        "\n(2)Узнать почему вас пригласили сюда и что вы должны делать  " + "" ,
                2, 15, 0, 0);
        start_story.direction[1].direction[0] = new Situation("Вы открыли инструкцию  ", " Вы открыли инструкцию но к сожелению все страницы были оборваны и вы " +
                "ничего не смогли прочитать жаль(", 1, 0, 0, 0);

        start_story.direction[1].direction[1] = new Situation("Вы начали внимательно читать письмо", "Вы узнали в песьме что вас пригласил маг (он увидел вас что то собенное  ) " +
                "Вы должны найти этого мага он находиться за одной из дверей", 1, 0, 0, 0);

        start_story.direction[2] = new Situation(
                "Вы Вошли в первый коридор ",
                "В конце коридора была дверь и около двери были развешены страшные картины \n(1)Открыть" +
                        "\n(2) Убежать пока не поздно " ,
                2, 0, 0, 0);
        start_story.direction[2].direction[0] = new Situation("Вы окрыли дверь ", " Вы открыли дверь и увидели тьму , вы вошли как резко за вами захлопнулась дверь." +
                "Вы начали осматривать и увидили свет и пошли на него , пока вы шли на него под вами провалился пол и вы проснулись . Вы долго не могли придти в себя после того что с вами произошло. ",
                1, 0, 0, 0);

        start_story.direction[2].direction[1] = new Situation("Вы убежали  ", "Вы убежали и теперь всегда с вами чувсво того что надо было остаться но уже поздно надо было думать раньше  ",
                1, 0, 0, 0);
        start_story.direction[3] = new Situation(
                "Вы вошли во втрой коридор",
        "В конце коридора была дверь около двери , были множество разных цветов посаженых в горшки \n(1) Открыть" +
                "\n(2)Осмотреть получше коридор и цветы" +
                "\n(3) Убежать пока не поздно " ,
        3 , 0 , 0 ,0);
        start_story.direction[3].direction[0] = new Situation("Вы окрыли дверь ", " Вы открыли дверь и увидели сказочный мир и огромный замок , вы начали идти в замок как в друг вы подошли к дверям замка, и увидели замок на дверях " +
                "вы не смогли найти ключ и ушли в отчаине    ",
                1, 0, 0, 0);

        start_story.direction[3].direction[1] = new Situation("Вы начали осматривать коридор и цветы   ", "Вы осмотрели коридор но ничего не нашли после чего вы начали осматривать цветы где нашли ключ ,вы открыли дверь и увидели сказочный мир и огромный замок , вы начали идти в замок как в друг вы подошли к дверям замка, и увидели замок на дверях вы вставили ключ " +
                "который нашли в цветах .Вы открыли дверь и увидили мага который расказал для чего вы сюда прибыли , вы с ним поболтали и узнали много чего интересного  , после чего вы пошли домой. " +
                "Вы прошли игру я вас поздравляю(Game over)  ",
                1, 0, 0, 0);
        start_story.direction[3].direction[2] = new Situation("Вы убежали  ", "Вы убежали и теперь всегда с вами чувсво того что надо было остаться но уже поздно надо было думать раньше ) ",
                1, 0, 0, 0);
        return start_story;
    }

    public Story loadNextStory() {
        // Получаем индекс текущей истории
        int currentIndex = stories.indexOf(current_situation) + 1;
        if (currentIndex < stories.size() - 1) {
            // Если есть следующая история в списке, загружаем ее
            current_situation = stories.get(currentIndex + 1);
            return this; // Возвращаем текущий экземпляр Story с новой историей
        } else {
            // Если это была последняя история, можете выполнить другую логику, например, начать игру заново или закончить
            return null; // Или, например, возвращать null для обозначения окончания игры
        }
    }


    public void go(int num) {
        if (num <= current_situation.direction.length)
            current_situation = current_situation.direction[num - 1];
        else
            System.out.println("Вы можете выбирать из "
                    + current_situation.direction.length + " вариантов");
    }

    public boolean isEnd() {
        return current_situation.direction.length == 0;
    }
}